#!/usr/bin/env bash
#
# Wrapper for launching Dockerized devenv
set -euo pipefail
SOURCE="$(dirname "${BASH_SOURCE[0]}")"

#===============================================================================
# Logging
#===============================================================================
RED="\033[0;31m"
GREEN="\033[0;32m"  # <-- [0 means not bold
YELLOW="\033[0;33m" # <-- [0 means bold
B_YELLOW="\033[1;33m" # <-- [1 means bold
CYAN="\033[0;36m"
MAGENTA="\033[0;35m"
NC="\e[0m"

_logger() {
  local date_time
  date_time="$(date +"%Y/%m/%d %H:%M:%S")"
  printf "${!COLOR:-$NC}"
  [[ -n "${VERBOSE:-}" ]] && printf "[${date_time}] [${DBG_LEVEL:-}]${NC} $@\n"
  [[ -z "${VERBOSE:-}" ]] && printf "[${DBG_LEVEL:-}]${NC} $@\n"
  # printf "${NC}\n"
}

debug() { COLOR=MAGENTA DBG_LEVEL=DEBUG _logger "$@"; }
info() { COLOR=GREEN DBG_LEVEL=INFO _logger "$@"; }
warn() { COLOR=YELLOW DBG_LEVEL=WARN _logger "$@" >&2; }
error() { COLOR=RED DBG_LEVEL=ERROR _logger "$@" >&2; }
fatal() { COLOR=RED DBG_LEVEL=FATAL _logger "ðŸ’€ $@" >&2; exit 0; }

#===============================================================================

mountDir="${HOME}/Uni/CS6200/pr1/"
tmp="${SOURCE}/tmp"
bash_history="${SOURCE}/history/.bash_history"

IMAGE="uni/devenv"
NAME="devenv"
PCAP_FILE="devenv.pcap"
PIDS=()
WORKDIR="/app/gflib"

MOUNTS=(
  "-v" "${mountDir}:/app"
  "-v" "${tmp}:/capture"
  "-v" "${bash_history}:/root/.bash_history"
)

VIRT_FLAGS=(
  "-e" "QEMU_STRACE=1"
  "--cap-add=SYS_PTRACE"
  "--security-opt=seccomp=unconfined"
  "--security-opt=apparmor=unconfined"
)

PORT_FWDS=(
  "-p" "8888:8888"
  "-p" "10680:10680"
)


cleanup() {
  if [[ -n "${PIDS}" ]]; then
    info "Cleaning up..."
    info "Removing tcpdump capture PID ${PIDS[*]}"
    docker exec -i "${NAME}" /bin/sh -c "kill -9 ${PIDS[*]}"
    docker exec -i "${NAME}" /bin/sh -c "pgrep tcpdump"
  fi
}

trap cleanup SIGINT

start_container() {
  if [[ ! $(docker ps --filter "name=^/$NAME$" --format '{{.Names}}') == $NAME ]]; then
    docker run -it -d --name "${NAME}" \
      "${VIRT_FLAGS[@]}" \
      "${MOUNTS[@]}" \
      "${PORT_FWDS[@]}" \
      "${IMAGE}" \
      /bin/bash
  else
    warn "Container already running"
  fi

  docker ps --format 'table {{.ID}}\t{{.Command}}\t{{.CreatedAt}}\t{{.Status}}'
}

stop_container() {
  (docker stop "${NAME}" &>/dev/null && docker rm "${NAME}" &>/dev/null) || warn "Container not running"
}

restart_container() {
  stop_container
  start_container
}

exec_command() {
  docker exec -it -w "${WORKDIR}" "${NAME}" $@
}

stop_tcpdump() {
  pid="$1"
  docker exec -i "${NAME}" /bin/sh -c "kill -9 $pid"
}

capture_net() {
  # iface=lo
  PIDS+=("$(docker exec -i "${NAME}" /bin/sh -c 'nohup tcpdump -U -w - -i any 2>/dev/null > /capture/devenv.pcap & echo $!')")
  tail -f -c +0 "${tmp}/${PCAP_FILE}" | wireshark -k -i -
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --start )
      info "Starting the devenv container..."
      start_container
      exit $?
      ;;
    --stop )
      info "Stopping the devenv container..."
      stop_container && info "Container stopped successfully"
      exit $?
      ;;
    --restart )
      info "Restarting container"
      shift 1
      restart_container
      exit $?
      ;;
    --capture)
      info "Starting network capture"
      capture_net
      exit
      ;;
    -h | --help)
      echo "Devenv script"
      exit 2
      ;;
    --)
      shift;
      break
      ;;
    *)
      echo "Unexpected option: $1"
      exit 1
      ;;
  esac
done

start_container

ARGS="${@:-/bin/bash}"
exec_command "$ARGS"
